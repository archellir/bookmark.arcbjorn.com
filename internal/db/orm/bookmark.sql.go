// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bookmark.sql

package db

import (
	"context"
)

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (
  name,
  url
) VALUES (
  $1, $2
) RETURNING id, name, url, group_id, created_at
`

type CreateBookmarkParams struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBookmark, arg.Name, arg.Url)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmarks
WHERE id = $1
`

func (q *Queries) DeleteBookmark(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark, id)
	return err
}

const deleteBookmarks = `-- name: DeleteBookmarks :exec
DELETE FROM bookmarks
`

func (q *Queries) DeleteBookmarks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteBookmarks)
	return err
}

const getBookmark = `-- name: GetBookmark :one
SELECT id, name, url, group_id, created_at FROM bookmarks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookmark(ctx context.Context, id int32) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, getBookmark, id)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const getBookmarkById = `-- name: GetBookmarkById :one
SELECT id, name, url, group_id, created_at FROM bookmarks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookmarkById(ctx context.Context, id int32) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, getBookmarkById, id)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const listBookmarks = `-- name: ListBookmarks :many
SELECT id, name, url, group_id, created_at FROM bookmarks
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBookmarksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBookmarks(ctx context.Context, arg ListBookmarksParams) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, listBookmarks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBookmarkByNameAndUrl = `-- name: SearchBookmarkByNameAndUrl :many
SELECT id, name, url, group_id, created_at FROM bookmarks  
WHERE
  url ILIKE $1::text OR
  name ILIKE $1::text
`

func (q *Queries) SearchBookmarkByNameAndUrl(ctx context.Context, searchString string) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, searchBookmarkByNameAndUrl, searchString)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookmarkName = `-- name: UpdateBookmarkName :one
UPDATE bookmarks
SET name = $2
WHERE id = $1
RETURNING id, name, url, group_id, created_at
`

type UpdateBookmarkNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateBookmarkName(ctx context.Context, arg UpdateBookmarkNameParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, updateBookmarkName, arg.ID, arg.Name)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const updateBookmarkUrl = `-- name: UpdateBookmarkUrl :one
UPDATE bookmarks
SET url = $2
WHERE id = $1
RETURNING id, name, url, group_id, created_at
`

type UpdateBookmarkUrlParams struct {
	ID  int32  `json:"id"`
	Url string `json:"url"`
}

func (q *Queries) UpdateBookmarkUrl(ctx context.Context, arg UpdateBookmarkUrlParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, updateBookmarkUrl, arg.ID, arg.Url)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}
